#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Get regional effective reproductive rate from https://epiforecasts.io/covid/posts/national/united-states/#ref-jhu_2019_2020
Rt_MA_upper <- 1.1
Rt_MA_lower <- 0.73
Rt_RI_upper <- 1.1
Rt_RI_lower <- 0.65
Rt <- list(c(Rt_MA_lower, Rt_MA_lower, Rt_RI_lower), c(Rt_MA_upper, Rt_MA_upper, Rt_RI_upper))
#True cases - for examining the performance of the model
true_cases <- read.csv("data_true.csv")
#EXPERIMENT 1: How does incorporating commuters impact the model?
#Here we simply assume the Rt is the same as MA
test_labels <- c("m-ADBio", "SEIR")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#EXPERIMENT 2: How does the forecast change if we assume sensor-based diagnosis with possible false positives or negatives?
#Here we define initial values with different accuracies and reset reproductive rate
X0_sensor1 <- madbio_initial_values(cases, pop, pE, pI, acc = 0.95)
X0_sensor2 <- madbio_initial_values(cases, pop, pE, pI, acc = 1.05)
test_labels <- c("No Sensor Error", "Sensor Underestimate by 5%", "Sensor Overestimate by 5%")
Rt_MA_lower <- 0.73
Rt_RI_upper <- 1.1
Rt_RI_lower <- 0.65
Rt <- list(c(Rt_MA_lower, Rt_MA_lower, Rt_RI_lower), c(Rt_MA_upper, Rt_MA_upper, Rt_RI_upper))
#True cases - for examining the performance of the model
true_cases <- read.csv("data_true.csv")
#EXPERIMENT 1: How does incorporating commuters impact the model?
#Here we simply assume the Rt is the same as MA
test_labels <- c("m-ADBio", "SEIR")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#EXPERIMENT 2: How does the forecast change if we assume sensor-based diagnosis with possible false positives or negatives?
#Here we define initial values with different accuracies and reset reproductive rate
X0_sensor1 <- madbio_initial_values(cases, pop, pE, pI, acc = 0.95)
X0_sensor2 <- madbio_initial_values(cases, pop, pE, pI, acc = 1.05)
test_labels <- c("No Sensor Error", "Sensor Underestimate by 5%", "Sensor Overestimate by 5%")
#Run Model
result2 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, C, list(X0, X0_sensor1, X0_sensor2), 91, START_DATE)
#Plot model
madbio_plot(result2, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Get regional effective reproductive rate from https://epiforecasts.io/covid/posts/national/united-states/#ref-jhu_2019_2020
Rt_MA_upper <- 1.1
Rt_MA_lower <- 0.73
Rt_RI_upper <- 1.1
Rt_RI_lower <- 0.65
Rt <- list(c(Rt_MA_lower, Rt_MA_lower, Rt_RI_lower), c(Rt_MA_upper, Rt_MA_upper, Rt_RI_upper))
#True cases - for examining the performance of the model
true_cases <- read.csv("data_true.csv")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
cases <- read.csv("data.csv")
pop <- c(C[1,1], C[2,2], C[3,3])
#Get regional effective reproductive rate from https://epiforecasts.io/covid/posts/national/united-states/#ref-jhu_2019_2020
Rt_MA_upper <- 1.1
Rt_MA_lower <- 0.73
Rt_RI_upper <- 1.1
Rt_RI_lower <- 0.65
Rt <- list(c(Rt_MA_lower, Rt_MA_lower, Rt_RI_lower), c(Rt_MA_upper, Rt_MA_upper, Rt_RI_upper))
#True cases - for examining the performance of the model
true_cases <- read.csv("data_true.csv")
#EXPERIMENT 1: How does incorporating commuters impact the model?
#Here we simply assume the Rt is the same as MA
test_labels <- c("m-ADBio", "SEIR")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#EXPERIMENT 2: How does the forecast change if we assume sensor-based diagnosis with possible false positives or negatives?
#Here we define initial values with different accuracies and reset reproductive rate
X0_sensor1 <- madbio_initial_values(cases, pop, pE, pI, acc = 0.95)
X0_sensor2 <- madbio_initial_values(cases, pop, pE, pI, acc = 1.05)
test_labels <- c("No Sensor Error", "Sensor Underestimate by 5%", "Sensor Overestimate by 5%")
#Run Model
result2 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, C, list(X0, X0_sensor1, X0_sensor2), 91, START_DATE)
#Plot model
madbio_plot(result2, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
pop <- c(C[1,1], C[2,2], C[3,3])
#Get regional effective reproductive rate from https://epiforecasts.io/covid/posts/national/united-states/#ref-jhu_2019_2020
Rt_MA_upper <- 1.1
Rt_MA_lower <- 0.73
Rt_RI_upper <- 1.1
Rt_RI_lower <- 0.65
Rt <- list(c(Rt_MA_lower, Rt_MA_lower, Rt_RI_lower), c(Rt_MA_upper, Rt_MA_upper, Rt_RI_upper))
#True cases - for examining the performance of the model
true_cases <- read.csv("data_true.csv")
#EXPERIMENT 1: How does incorporating commuters impact the model?
#Here we simply assume the Rt is the same as MA
test_labels <- c("m-ADBio", "SEIR")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#EXPERIMENT 2: How does the forecast change if we assume sensor-based diagnosis with possible false positives or negatives?
#Here we define initial values with different accuracies and reset reproductive rate
X0_sensor1 <- madbio_initial_values(cases, pop, pE, pI, acc = 0.95)
X0_sensor2 <- madbio_initial_values(cases, pop, pE, pI, acc = 1.05)
test_labels <- c("No Sensor Error", "Sensor Underestimate by 5%", "Sensor Overestimate by 5%")
#Run Model
result2 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, C, list(X0, X0_sensor1, X0_sensor2), 91, START_DATE)
#Plot model
madbio_plot(result2, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
C <- as.matrix(read.csv("commuting.csv"))
C_nocommute <- diag(diag(C))
cases <- read.csv("data.csv")
pop <- c(C[1,1], C[2,2], C[3,3])
#Get regional effective reproductive rate from https://epiforecasts.io/covid/posts/national/united-states/#ref-jhu_2019_2020
Rt_MA_upper <- 1.1
Rt_MA_lower <- 0.73
Rt_RI_upper <- 1.1
Rt_RI_lower <- 0.65
Rt <- list(c(Rt_MA_lower, Rt_MA_lower, Rt_RI_lower), c(Rt_MA_upper, Rt_MA_upper, Rt_RI_upper))
#True cases - for examining the performance of the model
true_cases <- read.csv("data_true.csv")
#EXPERIMENT 1: How does incorporating commuters impact the model?
#Here we simply assume the Rt is the same as MA
test_labels <- c("m-ADBio", "SEIR")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#EXPERIMENT 2: How does the forecast change if we assume sensor-based diagnosis with possible false positives or negatives?
#Here we define initial values with different accuracies and reset reproductive rate
X0_sensor1 <- madbio_initial_values(cases, pop, pE, pI, acc = 0.95)
X0_sensor2 <- madbio_initial_values(cases, pop, pE, pI, acc = 1.05)
test_labels <- c("No Sensor Error", "Sensor Underestimate by 5%", "Sensor Overestimate by 5%")
#Run Model
result2 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, C, list(X0, X0_sensor1, X0_sensor2), 91, START_DATE)
#Plot model
madbio_plot(result2, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
### Data Setup ###
START_DATE <- as.Date("2021-01-12")
C <- as.matrix(read.csv("commuting.csv"))
C_nocommute <- diag(diag(C))
cases <- read.csv("data.csv")
pop <- c(C[1,1], C[2,2], C[3,3])
#Get regional effective reproductive rate from https://epiforecasts.io/covid/posts/national/united-states/#ref-jhu_2019_2020
Rt_MA_upper <- 1.1
Rt_MA_lower <- 0.73
Rt_RI_upper <- 1.1
Rt_RI_lower <- 0.65
Rt <- list(c(Rt_MA_lower, Rt_MA_lower, Rt_RI_lower), c(Rt_MA_upper, Rt_MA_upper, Rt_RI_upper))
#True cases - for examining the performance of the model
true_cases <- read.csv("data_true.csv")
#EXPERIMENT 1: How does incorporating commuters impact the model?
#Here we simply assume the Rt is the same as MA
test_labels <- c("m-ADBio", "SEIR")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#EXPERIMENT 2: How does the forecast change if we assume sensor-based diagnosis with possible false positives or negatives?
#Here we define initial values with different accuracies and reset reproductive rate
X0_sensor1 <- madbio_initial_values(cases, pop, pE, pI, acc = 0.95)
X0_sensor2 <- madbio_initial_values(cases, pop, pE, pI, acc = 1.05)
test_labels <- c("No Sensor Error", "Sensor Underestimate by 5%", "Sensor Overestimate by 5%")
#Run Model
result2 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, C, list(X0, X0_sensor1, X0_sensor2), 91, START_DATE)
#Plot model
madbio_plot(result2, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Calculate error for the model with normal initial value estimation (Experiment 111) versus underestimation (Expeirment 311) versus overestimation (experiment 211)
get_cumulative_error(result2, true_cases, 91, "UMassD", test_labels = test_labels)
Rt_MA_lower <- 0.73
Rt_RI_upper <- 1.1
Rt_RI_lower <- 0.65
Rt <- list(c(Rt_MA_lower, Rt_MA_lower, Rt_RI_lower), c(Rt_MA_upper, Rt_MA_upper, Rt_RI_upper))
#True cases - for examining the performance of the model
true_cases <- read.csv("data_true.csv")
#EXPERIMENT 1: How does incorporating commuters impact the model?
#Here we simply assume the Rt is the same as MA
test_labels <- c("m-ADBio", "SEIR")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#EXPERIMENT 2: How does the forecast change if we assume sensor-based diagnosis with possible false positives or negatives?
#Here we define initial values with different accuracies and reset reproductive rate
X0_sensor1 <- madbio_initial_values(cases, pop, pE, pI, acc = 0.95)
X0_sensor2 <- madbio_initial_values(cases, pop, pE, pI, acc = 1.05)
test_labels <- c("No Sensor Error", "Sensor Underestimate by 5%", "Sensor Overestimate by 5%")
#Run Model
result2 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, C, list(X0, X0_sensor1, X0_sensor2), 91, START_DATE)
#Plot model
madbio_plot(result2, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Get regional effective reproductive rate from https://epiforecasts.io/covid/posts/national/united-states/#ref-jhu_2019_2020
Rt_MA_upper <- 1.1
Rt_MA_lower <- 0.73
Rt_RI_upper <- 1.1
Rt_RI_lower <- 0.65
Rt <- list(c(Rt_MA_lower, Rt_MA_lower, Rt_RI_lower), c(Rt_MA_upper, Rt_MA_upper, Rt_RI_upper))
#True cases - for examining the performance of the model
true_cases <- read.csv("data_true.csv")
#EXPERIMENT 1: How does incorporating commuters impact the model?
#Here we simply assume the Rt is the same as MA
test_labels <- c("m-ADBio", "SEIR")
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#Step 1: Calculate initial values using madbio package
X0 <- madbio_initial_values(cases, pop, pE, pI)
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
#Step 3: Plot model
madbio_plot(result1, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
#Optional Step 4: Calculate error for the model using commuting data (111) versus no commuting data (112)
get_cumulative_error(result1, true_cases, 91, "UMassD", test_labels = test_labels)
#EXPERIMENT 2: How does the forecast change if we assume sensor-based diagnosis with possible false positives or negatives?
#Here we define initial values with different accuracies and reset reproductive rate
X0_sensor1 <- madbio_initial_values(cases, pop, pE, pI, acc = 0.95)
X0_sensor2 <- madbio_initial_values(cases, pop, pE, pI, acc = 1.05)
test_labels <- c("No Sensor Error", "Sensor Underestimate by 5%", "Sensor Overestimate by 5%")
#Run Model
result2 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, C, list(X0, X0_sensor1, X0_sensor2), 91, START_DATE)
#Plot model
madbio_plot(result2, "UMassD", true_cases, test_labels = test_labels, plot_type = "Cumulative Cases", plot_format = "plotly")
source('~/CSDS Research/m-ADBio/example.R', echo=TRUE)
install_github("salbalkus/mADBio")
install_github("salbalkus/madbio")
install_github("salbalkus/madbio")
?install_github
install("devtools")
library("devtools")
install_github("salbalkus/madbio")
install.packages("usethis")
install.packages("usethis")
#Install madbio if not already installed; the code below installs the package if this script is placed in the same directory as the folder containing the package.
path_of_code <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(path_of_code)
library(devtools)
getwd()
setwd("madbio")
usethis::use_testthat
usethis::use_testthat()
devtools::test_coverage()
source('~/CSDS Research/m-ADBio/example.R', echo=TRUE)
View(X0)
length(pop)
data.frame(c(1,2,3), c(4,5,6))
View(cases)
cases_test <- data.frame(region1 = c(1, 3, 4, 5, 8, 6), region2 = c(0, 0, 1, 0, 4, 0))
cases_test
cases_test <- data.frame(region1 = c(1, 3, 4, 5, 8, 6, 4, 5), region2 = c(0, 0, 1, 0, 4, 0, 0, 2))
pop_test <- c(500, 100)
pI <- 2.7
pE <- 1.5
cases_test <- data.frame(region1 = c(1, 3, 4, 5, 8, 6, 4, 5), region2 = c(0, 0, 1, 0, 4, 0, 0, 2))
pop_test <- c(500, 100)
pI <- 2.7
pE <- 1.5
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions"{
madbio_initial_values(cases_test, pop_test, pI, pE)
})
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
cases_test <- data.frame(region1 = c(1, 3, 4, 5, 8, 6, 4, 5), region2 = c(0, 0, 1, 0, 4, 0, 0, 2))
pop_test <- c(500, 100)
pI <- 2.7
pE <- 1.5
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
cases_test
View(cases)
install("madbio")
library(madbio)       # load our package
cases_test <- data.frame(region1 = c(1, 3, 4, 5, 8, 6, 4, 5), region2 = c(0, 0, 1, 0, 4, 0, 0, 2))
pop_test <- c(500, 100)
pI <- 2.7
pE <- 1.5
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
initial_values_test
initial_values_test
nrow(initial_values_test)
dim(initial_values_test)
dim(initial_values_test) == c(4, 2)
all(dim(initial_values_test) == c(4, 2))
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions"{
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(dim(initial_values_test), c(4, 2))
})
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions", {
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(dim(initial_values_test), c(4, 2))
})
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions", {
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(dim(initial_values_test), c(4, 2))
})
context("check-output")  # Our file is called "test-check_output.R"
library(testthat)        # load testthat package
context("check-output")  # Our file is called "test-check_output.R"
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions", {
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(dim(initial_values_test), c(4, 2))
})
devtools::test_coverage()
library(devtools)
devtools::test()
getwd()
setwd("madbio")
devtools::test()
devtools::test_coverage()
cases_test <- data.frame(region1 = c(1, 3, 4, 5, 8, 6, 4, 5), region2 = c(10, 15, 16, 17, 20, 18, 4, 9), region3 = c(0, 0, 1, 0, 4, 0, 0, 2))
pop_test <- c(500, 100)
pI <- 2.7
pE <- 1.4
cases_test <- data.frame(region1 = c(1, 3, 4, 5, 8, 6, 4, 5), region2 = c(10, 15, 16, 17, 20, 18, 4, 9), region3 = c(0, 0, 1, 0, 4, 0, 0, 2))
pop_test <- c(500, 1000, 100)
pI <- 2.7
pE <- 1.4
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions", {
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(dim(initial_values_test), c(4, 3))
})
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions", {
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(dim(initial_values_test), c(4, 2))
})
initial_values_test
cases_test <- data.frame(region1 = c(1, 3, 4, 5, 8, 6, 4, 5), region2 = c(10, 15, 16, 17, 20, 18, 4, 9), region3 = c(0, 0, 1, 0, 4, 0, 0, 2))
pop_test <- c(500, 1000, 100)
pI <- 2.7
pE <- 1.4
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions", {
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(dim(initial_values_test), c(4, 3))
})
cases_test
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
initial_values_test
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions", {
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(initial_values_test, matrix(c(464, 15, 13, 8), c(891, 31, 37, 41), c(93, 2, 4, 1)))
})
matrix(c(464, 15, 13, 8), c(891, 31, 37, 41), c(93, 2, 4, 1))
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions", {
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(initial_values_test, data.frame(c(464, 15, 13, 8), c(891, 31, 37, 41), c(93, 2, 4, 1)))
})
matrix(c(c(464, 15, 13, 8), c(891, 31, 37, 41), c(93, 2, 4, 1))
)
matrix(c(c(464, 15, 13, 8), c(891, 31, 37, 41), c(93, 2, 4, 1)), nrow = 4)
test_that("madbio_initial_values() returns 4 x n matrix, where n is the number of regions", {
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(initial_values_test, matrix(c(c(464, 15, 13, 8), c(891, 31, 37, 41), c(93, 2, 4, 1)), nrow = 4))
})
test_that("madbio_initial_values() returns correctly delayed values for S, E, I, and R compartments", {
initial_values_test <- madbio_initial_values(cases_test, pop_test, pI, pE)
expect_equal(initial_values_test, matrix(c(c(464, 15, 13, 8), c(891, 31, 37, 41), c(93, 2, 4, 1)), nrow = 4))
})
#Step 2: Generate Forecast
result1 <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
result1
X0 <- madbio_initial_values(cases_test, pop_test, pI, pE)
?expect_true
expect_is
?expect_is
?expect_type
test_that("madbio() returns a data frame of the correct format", {
result_test <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
expect_type(result_test, "data.frame")
})
result_test <- madbio(c("UMassD","MA","RI"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 91, START_DATE)
result_test
View(C)
pop[1]
View(C)
C <- matrix(c(500, 200, 5, 100, 1000, 20, 10, 5, 100), nrow = 3)
C
C_nocommute <- diag(diag(C))
C_nocommute
X0
result_test <- madbio(c("region1","region2","region3"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 30, "2021-01-01")
test_that("madbio() returns a data frame of the correct format", {
result_test <- madbio(c("region1","region2","region3"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 30, "2021-01-01")
expect_type(result_test, "data.frame")
})
test_that("madbio() returns a data frame of the correct format", {
result_test <- madbio(c("region1","region2","region3"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 30, "2021-01-01")
expect_type(result_test, "data.frame")
})
pop
Rt
X0 <- madbio_initial_values(cases_test, pop_test, pI, pE)
C <- matrix(c(500, 200, 5, 100, 1000, 20, 10, 5, 100), nrow = 3)
C_nocommute <- diag(diag(C(0.9, 0.8, 0.6)))
Rt <- list(c(), c(1.1, 1.2, 1.4))
C_nocommute <- diag(diag(C))
Rt <- list(c(0.9, 0.8, 0.6), c(1.1, 1.2, 1.4))
Rt
pE
pI
test_that("madbio() returns a data frame of the correct format", {
result_test <- madbio(c("region1","region2","region3"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 30, "2021-01-01")
expect_type(result_test, "data.frame")
})
test_that("madbio() returns a data frame of the correct format", {
result_test <- madbio(c("region1","region2","region3"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 30, as.date("2021-01-01"))
expect_type(result_test, "data.frame")
})
test_that("madbio() returns a data frame of the correct format", {
result_test <- madbio(c("region1","region2","region3"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 30, as_date("2021-01-01"))
expect_type(result_test, "data.frame")
})
test_that("madbio() returns a data frame of the correct format", {
result_test <- madbio(c("region1","region2","region3"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 30, as.Date("2021-01-12"))
expect_type(result_test, "data.frame")
})
result_test
result_test <- madbio(c("region1","region2","region3"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 30, as.Date("2021-01-12"))
result_test
typeof("result_test")
typeof(result_test)
View(result_test)
?expect
names(result_test)
names(result_test) == c("Time", "Date", "Compartment", "Geography", "Lower","Upper","Experiment")
test_that("madbio() returns a data frame of the correct format", {
result_test <- madbio(c("region1","region2","region3"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 30, START_DATE)
expect_equal(names(result_test), c("Time", "Date", "Compartment", "Geography", "Lower","Upper","Experiment"))
})
result_test
is.na(result_test)
test_that("madbio() returns a data frame with no NA values", {
result_test <- madbio(c("region1","region2","region3"), pop, Rt, pE, pI, list(C, C_nocommute), X0, 30, START_DATE)
expect_false(any(is.na(names(result_test))))
})
